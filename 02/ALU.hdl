// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl

/**
 * The ALU (Arithmetic Logic Unit).
 * Computes one of the following functions:
 * x+y, x-y, y-x, 0, 1, -1, x, y, -x, -y, !x, !y,
 * x+1, y+1, x-1, y-1, x&y, x|y on two 16-bit inputs, 
 * according to 6 input bits denoted zx,nx,zy,ny,f,no.
 * In addition, the ALU computes two 1-bit outputs:
 * if the ALU output == 0, zr is set to 1; otherwise zr is set to 0;
 * if the ALU output < 0, ng is set to 1; otherwise ng is set to 0.
 */

// Implementation: the ALU logic manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) set x = 0        // 16-bit constant
// if (nx == 1) set x = !x       // bitwise not
// if (zy == 1) set y = 0        // 16-bit constant
// if (ny == 1) set y = !y       // bitwise not
// if (f == 1)  set out = x + y  // integer 2's complement addition
// if (f == 0)  set out = x & y  // bitwise and
// if (no == 1) set out = !out   // bitwise not
// if (out == 0) set zr = 1
// if (out < 0) set ng = 1

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute out = x + y (if 1) or x & y (if 0)
        no; // negate the out output?

    OUT 
        out[16], // 16-bit output
        zr, // 1 if (out == 0), 0 otherwise
        ng; // 1 if (out < 0),  0 otherwise

    PARTS:
   // Put you code here:
   Mux16(a=x, b=false, sel=zx, out=Xpostz); // zero x
   Not16(in=Xpostz, out=notXpostz);// make not x
   Mux16(a=Xpostz, b=notXpostz, sel=nx, out=doneX); // not x

   Mux16(a=y, b=false, sel=zy, out=Ypostz); // do the same for y
   Not16(in=Ypostz, out=notYpostz);
   Mux16(a=Ypostz, b=notYpostz, sel=ny, out=doneY);
   
   Add16(a=doneX, b=doneY, out=XaddY); // calc their add
   And16(a=doneX, b=doneY, out=XandY); // and their and
   Mux16(a=XandY, b=XaddY, sel=f, out=XYfunc); // then pick one

   Not16(in=XYfunc, out=notXYfunc); // not if required
   Mux16(a=XYfunc, b=notXYfunc, sel=no, out=out, out=whattersmoment, out[0..7]=zeroseven, out[8..15]=eightfifteen, out[15]=ng); // final result, also output into 'result'

   Or8Way(in=zeroseven, out=firsthalf); // annoying as heck check for 0
   Not(in=firsthalf, out=notfirsthalf); // firsthalf will be off if all are off so it needs inverting
   Or8Way(in=eightfifteen, out=secondhalf); // and the second half
   Not(in=secondhalf, out=notsecondhalf);
   And(a=notfirsthalf, b=notsecondhalf, out=zr); // make sure both are funky
}